#!/usr/bin/env perl
use strict;
use feature 'unicode_strings';
use warnings FATAL => "utf8";

# Non-core dependencies
#
use JSON::Tiny qw(decode_json encode_json);

=head1 NAME

canto_compile.pl - Compile a JavaScript table for Cantotype.

=head1 SYNOPSIS

  canto_compile.pl HKSCS.json OtherMappings.txt Readings.txt > out.js

=head1 DESCRIPTION

This script reads data files from Hong Kong Supplemental Character Set
(HKSCS) and Unihan, and uses this data to compile a mapping of Cantonese
readings to all relevant codepoints.

The HKSCS file is a JSON file that has a JSON array at the top level.
Each element in this JSON array is a JSON object.  These object elements
must at least have a C<codepoint> property and a C<cantonese> property.
The C<codepoint> property has a string value that contains the Unicode
codepoint as base-16 digits.  The C<cantonese> property is also a
string.  If it is empty, the record is ignored.  Otherwise, it must
consist of one or more Jyutping romanizations, separated by commas.

The HKSCS file is B<not> a complete listing of Cantonese characters.
Instead, it only contains special Cantonese characters that are beyond
the baseline Big5 standard.  You can get a file C<HKSCS2016.json> that
is entitled I<Hong Kong Supplementary Character Set related information
(JSON format)> which has the necessary format from the Office of the
Government Chief Information Officer of Hong Kong, Common Chinese
Language Interface, Download Area, at:

C<https://www.ogcio.gov.hk/en/our_work/business/tech_promotion/ccli/
download_area/>

The Unihan files are available from the Unicode consortium in an archive
called C<unihan.zip>.  This script requires the C<OtherMappings> and
the C<Readings> text files.

The JavaScript file generated by this script simply defines a variable
named C<canto_table> that stores a JavaScript object.  This object has
properties that are equal to Jyutping romanizations in lowercase.  The
values of these properties are arrays that contain integer values for
the Unicode codepoints of characters that have that pronunciation.
Supplemental characters are represented directly as a single value
rather than as a surrogate pair.

=cut

# ==================
# Program entrypoint
# ==================

# Check that we got three parameters
#
($#ARGV == 2) or die "Wrong number of parameters, stopped";

# Store the parameters
#
my $path_hkscs    = $ARGV[0];
my $path_mappings = $ARGV[1];
my $path_readings = $ARGV[2];

# Check that files exist
#
(-f $path_hkscs) or die "Can't find '$path_hkscs', stopped";
(-f $path_mappings) or die "Can't find '$path_mappings', stopped";
(-f $path_readings) or die "Can't find '$path_readings', stopped";

# Start with an empty hash, which will map decimal integer codepoints to
# array references containing Jyutping romanizations
#
my %cmap;

# First, open the mappings file
#
open(my $fhm, "< :utf8", $path_mappings) or
  die "Failed to open '$path_mappings', stopped";

# Process mappings file line by line and add all Big5 Unicode codepoints
# to the hash, with empty array reference values for now
#
while (<$fhm>) {
  # Skip line if blank
  if (/^[ \t\r\n]*$/u) {
    next;
  }
  
  # Skip line if first character is # indicating comment
  if (/^[ \t]*#/u) {
    next;
  }
  
  # If this is a Big5 record, add to the hash
  if (/^[ \t]*U\+([0-9a-fA-F]{4,6})\tkBigFive\t/u) {
    my $cpv = hex($1);
    $cmap{"$cpv"} = [];
  }
}

# Close the mappings file
#
close($fhm);

# Second, open the readings file
#
open(my $fhr, "< :utf8", $path_readings) or
  die "Failed to open '$path_readings', stopped";

# Process readings file line by line, and for any Cantonese reading
# where the codepoint is already in the mappings file (indicating that
# it is in the core Big5 set), push all readings onto the array value,
# after making sure the array doesn't already contain that reading
#
while (<$fhr>) {
  # Skip line if blank
  if (/^[ \t\r\n]*$/u) {
    next;
  }
  
  # Skip line if first character is # indicating comment
  if (/^[ \t]*#/u) {
    next;
  }
  
  # If this is a Cantonese reading record, process it
  if (/^[ \t]*U\+([0-9a-fA-F]{4,6})\tkCantonese\t(.+)[\r\n]*$/u) {
    my $cpv = hex($1);
    my $rstr = $2;
    
    # Check that exactly one syllable defined
    ($rstr =~ /^[A-Za-z]+[1-6]$/u) or
      die "Invalid kCantonese value: $rstr stopped";
    
    # Check if reading already present
    my $already = 0;
    for my $r (@{$cmap{"$cpv"}}) {
      if ($r eq $rstr) {
        $already = 1;
        last;
      }
    }
    
    # If not already defined, add the reading
    if (not $already) {
      push @{$cmap{"$cpv"}}, ($rstr);
    }
  }
}

# Close the readings file
#
close($fhr);

# Open the HKSCS file in raw mode
#
open(my $fhh, "< :raw", $path_hkscs) or
  die "Failed to open '$path_hkscs', stopped";

# Slurp the whole HKSCS file into memory
#
my $hkscs;
{
  local $/;
  $hkscs = <$fhh>;
}

# Close HKSCS file
#
close($fhh);

# If file starts with UTF-8 BOM, remove it
#
if (length $hkscs > 3) {
  if ((ord(substr($hkscs, 0, 1)) == 0xef) and
      (ord(substr($hkscs, 1, 1)) == 0xbb) and
      (ord(substr($hkscs, 2, 1)) == 0xbf)) {
    $hkscs = substr($hkscs, 3);
  }
}

# Decode JSON
#
$hkscs = decode_json($hkscs);

# Make sure top-level JSON is array
#
(ref($hkscs) eq "ARRAY") or
  die "HKSCS must be JSON array, stopped";

# Go through all JSON records, and for each that has a Cantonese
# reading, add it to the hash, making sure it's not already in there
#
for my $h (@$hkscs) {
  
  # Make sure element is hash reference
  (ref($h) eq "HASH") or
    die "HKSCS elements must be JSON objects, stopped";
  
  # Make sure required codepoint and cantonese properties are there
  (exists $h->{'codepoint'}) or
    die "HKSCS elements must all have codepoint properties, stopped";
  (exists $h->{'cantonese'}) or
    die "HKSCS elements must all have cantonese properties, stopped";
  
  # Get the properties
  my $cpv  = $h->{'codepoint'};
  my $cstr = $h->{'cantonese'};
  
  # Skip if cantonese property is empty
  if ($cstr =~ /^[ \t]*$/u) {
    next;
  }
  
  # Parse the codepoint
  $cpv = hex($cpv);
  
  # Split by commas
  my @car = split /,/, $cstr;
  
  # Process each reading
  for my $r (@car) {
    # Trim whitespace
    $r =~ s/^[ \t]+//gu;
    $r =~ s/[ \t]+$//gu;
    
    # If codepoint doesn't exist yet, add it with empty array
    if (not exists $cmap{"$cpv"}) {
      $cmap{"$cpv"} = [];
    }
    
    # Check whether reading already present in array
    my $already = 0;
    for my $s (@{$cmap{"$cpv"}}) {
      if ($s eq $r) {
        $already = 1;
        last;
      }
    }
    
    # If not already defined, add the reading
    if (not $already) {
      push @{$cmap{"$cpv"}}, ($r);
    }
  }
}

# We now have a mapping of Unicode codepoints to all their readings; we
# need to build a mapping of readings to their Unicode codepoints
#
my %rmap;
for my $cpv (keys %cmap) {
  # Get the integer value of codepoint
  my $cpi = int($cpv);
  
  # Process each reading
  for my $r (@{$cmap{"$cpv"}}) {
    # If reading not yet defined, add it to rmap
    if (not exists $rmap{$r}) {
      $rmap{$r} = [];
    }
    
    # Push the integer codepoint value onto reading array
    push @{$rmap{$r}}, ($cpi);
  }
}

# Encode the mapping of readings to codepoints into JSON
#
my $rmap_json = encode_json(\%rmap);

# Print the completed JavaScript to output
#
print "var canto_table = $rmap_json;\n";

=head1 AUTHOR

Noah Johnson, C<noah.johnson@loupmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2022 Multimedia Data Technology Inc.

MIT License:

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files
(the "Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut
